library(readxl)
library(dplyr)
library(lme4)
library(ggplot2)

# 设置工作目录
setwd("C:/Users/79098/Desktop/Bumblebee_Data")

calculate_cv_per_segment <- function(df, segments) {
  # 分割时间段
  segment_length <- 3600 / segments
  df <- df %>%
    mutate(segment = ceiling(Standardized_time / segment_length)) %>%
    group_by(Colony.no., week, segment) %>%
    summarise(entrance_pollen_count = sum(Event == "entrance_pollen", na.rm = TRUE),
              entrance_none_count = sum(Event == "entrance_none", na.rm = TRUE),
              exit_count = sum(Event == "exit", na.rm = TRUE), .groups = 'drop')
  
  # 计算每个蜂群的变异系数
  cv_per_colony <- df %>%
    group_by(Colony.no., week) %>%
    summarise(cv_entrance_pollen = sd(entrance_pollen_count, na.rm = TRUE) / mean(entrance_pollen_count, na.rm = TRUE),
              cv_entrance_none = sd(entrance_none_count, na.rm = TRUE) / mean(entrance_none_count, na.rm = TRUE),
              cv_exit = sd(exit_count, na.rm = TRUE) / mean(exit_count, na.rm = TRUE), .groups = 'drop') %>%
    summarise(cv = mean(c(cv_entrance_pollen, cv_entrance_none, cv_exit), na.rm = TRUE))
  
  return(cv_per_colony)
}

# 筛选出所有观测时间为3600秒的族群
filtered_data <- all_weeks_final %>%
  filter(Obs_Duration == 3600)

# 计算过滤后组的数量
num_groups <- filtered_data %>%
  distinct(Colony.no., week) %>%
  nrow()

# 初始化
segments_min <- 2  # 最小分割数
segments_max <- 60 
cv_results <- data.frame()

# 迭代计算变异系数
for (segments in segments_min:segments_max) {
  # 计算当前分割数下的变异系数
  cv_per_colony <- calculate_cv_per_segment(filtered_data, segments)
  
  # 计算所有蜂群变异系数的均值或中位数
  mean_cv <- mean(cv_per_colony$cv, na.rm = TRUE)  # 或者使用中位数 median(cv_per_colony$cv, na.rm = TRUE)
  
  # 保存当前分割数和对应的变异系数
  cv_results <- rbind(cv_results, data.frame(segments = segments, mean_cv = mean_cv))
}

# 绘制总体变异系数随分割数变化的图表
plot(cv_results$segments, cv_results$mean_cv, type = "b", xlab = "Number of Segments", ylab = "Mean Coefficient of Variation", main = "Variation in Activity by Number of Segments")

# 绘制总体变异系数随分割数变化的图表，横坐标为对应时长（60 / Number of Segments）
plot(60 / cv_results$segments, cv_results$mean_cv, type = "b", 
     xlab = "Segment Duration (min)", 
     ylab = "Mean Coefficient of Variation", 
     main = "Variation in Activity by Segment Duration",
     col = "gray", # 将线和点的颜色设置为灰色
     pch = 21, bg = "gray") # 将点的内部填充颜色设置为灰色

# 在3分钟和10分钟的位置添加垂直辅助线（3分钟=180秒，10分钟=600秒）
abline(v = 3, col = "black", lty = 2)  # 在180秒处添加黑色虚线
abline(v = 10, col = "black", lty = 2)  # 在600秒处添加黑色虚线

# 找出3分钟和10分钟对应的点
points_3min <- which(abs(60 / cv_results$segments - 3) < 1e-6)
points_10min <- which(abs(60 / cv_results$segments - 10) < 1e-6)

# 将3分钟和10分钟的点和线的颜色设置为黑色
points(60 / cv_results$segments[points_3min], cv_results$mean_cv[points_3min], 
       col = "black", bg = "black", pch = 21)

points(60 / cv_results$segments[points_10min], cv_results$mean_cv[points_10min], 
       col = "black", bg = "black", pch = 21)

# 添加水平辅助线，水平线的 y 位置应为 3 分钟和 10 分钟对应的 y 值
abline(h = cv_results$mean_cv[points_3min], col = "black", lty = 2)
abline(h = cv_results$mean_cv[points_10min], col = "black", lty = 2)



# 找出变异系数显著变化的分割数
cv_segments <- cv_results[which.max(diff(cv_results$mean_cv)), "segments"]
print(paste("Selected number of segments:", cv_segments))
# 筛选出所有观测时间为3600秒的族群
filtered_data <- all_weeks_final %>%
  filter(Obs_Duration == 3600)

# 计算不同时间窗口的事件速率和花粉携带率与总体的差异
calculate_rate_difference <- function(df, time_window) {
  # 选择前 `time_window` 分钟的数据
  window_data <- df %>%
    filter(Standardized_time <= time_window * 60)  # 将时间窗口转化为秒
  
  # 计算时间窗口内的事件速率和花粉携带率
  window_summary <- window_data %>%
    group_by(Colony.no., week) %>%
    summarise(
      event_rate_window = sum(Event != "none", na.rm = TRUE) / (time_window * 60),  # 事件速率（单位时间事件数）
      pollen_carrying_rate_window = sum(Event == "entrance_pollen", na.rm = TRUE) / sum(Event == "entrance_pollen" | Event == "entrance_none", na.rm = TRUE),
      .groups = 'drop'
    )
  
  # 计算总体事件速率和花粉携带率
  overall_summary <- df %>%
    group_by(Colony.no., week) %>%
    summarise(
      event_rate_overall = sum(Event != "none", na.rm = TRUE) / 3600,  # 总体事件速率（单位时间事件数）
      pollen_carrying_rate_overall = sum(Event == "entrance_pollen", na.rm = TRUE) / sum(Event == "entrance_pollen" | Event == "entrance_none", na.rm = TRUE),
      .groups = 'drop'
    )
  
  # 合并窗口内和总体的活动数据
  comparison <- window_summary %>%
    left_join(overall_summary, by = c("Colony.no.", "week"), suffix = c("_window", "_overall"))
  
  # 计算每个蜂群在窗口内与总体的事件速率和花粉携带率的差异（可以使用相对差异、绝对差异或其他指标）
  comparison <- comparison %>%
    mutate(
      diff_event_rate = (event_rate_window - event_rate_overall) / event_rate_overall,  # 相对差异
      diff_pollen_carrying_rate = (pollen_carrying_rate_window - pollen_carrying_rate_overall) / pollen_carrying_rate_overall
    )
  
  # 计算平均差异（可按蜂群或周次取平均）
  avg_diff <- comparison %>%
    summarise(
      mean_diff_event_rate = mean(diff_event_rate, na.rm = TRUE),
      mean_diff_pollen_carrying_rate = mean(diff_pollen_carrying_rate, na.rm = TRUE)
    )
  
  return(avg_diff)
}

# 初始化数据框以保存不同时间窗口的结果
time_window_results <- data.frame()

# 迭代计算不同时间窗口下的事件速率和花粉携带率差异
for (time_window in 1:15) {  # 从1分钟到15分钟
  diff_result <- calculate_rate_difference(filtered_data, time_window)
  diff_result$time_window <- time_window
  time_window_results <- rbind(time_window_results, diff_result)
}



ggplot(time_window_results, aes(x = time_window)) +
  geom_line(aes(y = mean_diff_event_rate * 100, color = "Event Rate Difference (%)"), size = 1.2, alpha = 0.3) +
  geom_line(aes(y = mean_diff_pollen_carrying_rate * 100, color = "Pollen Carrying Rate Difference (%)"), size = 1.2, alpha = 0.5) +
  geom_point(aes(y = mean_diff_event_rate * 100, color = "Event Rate Difference (%)"), size = 3, alpha = 0.2) +
  geom_point(aes(y = mean_diff_pollen_carrying_rate * 100, color = "Pollen Carrying Rate Difference (%)"), size = 3, alpha = 0.5) +
  labs(x = "Time Window (minutes)", y = "Mean Difference (%)", color = "Metric") +
  theme_bw() +
  ggtitle("Difference in Event Rate and Pollen Carrying Rate Over Time Windows") +
  scale_color_manual(values = c("Event Rate Difference (%)" = "red", "Pollen Carrying Rate Difference (%)" = "blue")) +
  scale_x_continuous(breaks = seq(0, max(time_window_results$time_window), by = 2), # 设置 x 轴刻度，包括10
                     labels = scales::number_format(accuracy = 1)) + # 确保刻度格式一致
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.ticks.length = unit(-0.25, "cm"), # 将刻度线朝内
    legend.position = "right",
    plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
  ) +
  geom_vline(xintercept = 10, linetype = "dashed", color = "gray", size = 1) + # 添加10分钟的垂直线
  geom_segment(aes(x = 10, xend = 10, y = 0, yend = max(time_window_results$mean_diff_event_rate * 100)), 
               color = "black", alpha = 0) + # 添加垂直于Y轴的黑线，透明度为0
  geom_point(data = subset(time_window_results, time_window == 10), 
             aes(x = time_window, y = mean_diff_event_rate * 100, color = "Event Rate Difference (%)"), 
             size = 4, alpha = 1) + # 在10分钟位置覆盖不透明的红色点
  geom_point(data = subset(time_window_results, time_window == 10), 
             aes(x = time_window, y = mean_diff_pollen_carrying_rate * 100, color = "Pollen Carrying Rate Difference (%)"), 
             size = 4, alpha = 1) # 在10分钟位置覆盖不透明的蓝色点



